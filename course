МИНИСТЕРСТВО ОБРАЗОВАНИЯ РЕСПУБЛИКИ БЕЛАРУСЬ
БЕЛОРУССКИЙ ГОСУДАРСТВЕННЫЙ УНИВЕРСИТЕТ
ФАКУЛЬТЕТ СОЦИОКУЛЬТУРНЫХ КОММУНИКАЦИЙ
Кафедра информационных технологий 
 
 

  
 
ИНТЕРНЕТ–ВИТРИНА ВОДОНАГРЕВАТЕЛЕЙ
«HEATER»
Курсовой проект
 
 
 
 
 
Батаршина Евгения Анатольевича 
студента 4 курса, 
специальность  
«Прикладная информатика» 
Научный руководитель: 
Доцент кафедры информационных технологий, Царик Сергей Всеволодович 
 



Минск, 2020 
ОГЛАВЛЕНИЕ 
ВВЕДЕНИЕ	44
ГЛАВА 1. ОБЗОР ТЕХНОЛОГИЙ И СРЕДСТВ РАЗРАБОТКИ	5Ошибка! Закладка не определена.
1.1 Цели и задачи сайта	510
1.2 Spring Framework	510
1.3 IntelliJ IDEA	6Ошибка! Закладка не определена.
1.4 HTML, CSS, Bootsrap Framework	7Ошибка! Закладка не определена.
ГЛАВА 2. РЕАЛИЗАЦИЯ ПОЛЬЗОВАТЕЛЬСКОЙ ЧАСТИ (UI)	8Ошибка! Закладка не определена.Ошибка! Закладка не определена.
2.1 Информационная структура сайта	8Ошибка! Закладка не определена.
2.1 Графический дизайн сайта	10Ошибка! Закладка не определена.
ГЛАВА 3. РЕАЛИЗАЦИЯ СЕРВЕРНОЙ ЧАСТИ	13Ошибка! Закладка не определена.
ЗАКЛЮЧЕНИЕ	1919
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	2020
ПРИЛОЖЕНИЯ	2121

 	 





















РЕФЕРАТ  
Курсовой проект содержит 19 страниц, 9 рисунков, 6 листингов, 8 источников, 2 приложения.  
Ключевые слова: Веб-сайт, Верстка, Базы данных, Java, Spring, MVC, Intellj IDEA, PhpMAdmin.  
Цель проекта – разработать интернет-витрину водонагревателей, помогающую пользователям выбирать водонагреватели.   
Результатом 	является 	разработанный 	сайт 	«HeadeR» 	и панель администрирования. 
 
РЭФЕРАТ  
Курсавы праект змяшчае 19 старонак, 9 малюнкаў, 8 лістынгаў, 8 крыніц, 2 прыкладання.  
Ключавыя словы: Вэб-сайт, Вёрстка, Базы дадзеных, Java, Spring, MVC, Intellj IDEA, PhpMAdmin. 
Мэта праекта - распрацаваць інтэрнэт-вітрыну воданагравальнікаў, якая дапамагае карыстальнікам выбіраць воданагравальнікі.
Вынікам з'яўляецца распрацаваны сайт «HeadeR» і панэль адміністравання. 
ABSTRACT  
The course project contains 19 pages, 9 figures, 8 listings, 8 sources, 2 applications. 
Keywords: Website, Layout, Databases, Java, Spring, MVC, Intellj IDEA, PhpMAdmin.
The goal of the project is to develop an online movie service that helps users select films. 
The result is a developed HeadeR website and administration panel. 
 
 
 

ВВЕДЕНИЕ 
Водонагреватели играют немаловажную роль в жизни современных людей. Для жителей квартир водонагреватель — устройство, помогающее сохранить высокий уровень комфорта вне зависимости от графика подачи горячей воды. Для владельцев загородных домов и дач — это едва ли ни единственный способ обеспечить полноценное автономное горячее водоснабжение. 
Основная цель курсового проекта – разработать адаптивную интернет-витрину водонагревателей, в которой пользователь сможет узнать всю необходимую информацию о них: цену, описание, фотографии и выбрать водонагреватель по душе. На сайте будет осуществлена авторизация администратора. Авторизованный администратор сможет создавать, редактировать и удалять водонагреватели. 
Для достижения цели были сформулированы следующие задачи: 
	Постановка целей и задач сайта.
	Обзор технологий и средств разработки. 
	Реализация серверной части. 
	Реализация пользовательской части. 
 
     
 
 
 
 
 
 
 








ГЛАВА 1. ОБЗОР ТЕХНОЛОГИЙ И СРЕДСТВ РАЗРАБОТКИ
1.1 Цели и задачи сайта 
Проект «HeadeR» является интернет–витриной водонагревателей. Основная цель сайта – информационная, поскольку в нем представлена информация о водонагревателях. Целью проекта также является облегчение пользователям поиска и подбора водонагревателей по цене и описанию.  
Разрабатываемый проект должен содержать авторизацию, вывод продукции на страницу, отдельную страницу каждого продукта, админ-панель с возможностью редактировать, удалять и добавлять водонагреватели. 
Для достижения целей необходимо выполнить следующие задачи: 
1.	Создать каталог водонагревателей. 
2.	Разработать административную панель. 
Для выполнения поставленных целей использовались следующие технологии:  
	Фреймворк Java Spring MVC
	Среда разработки IntelliJ IDEA 
	HTML+ фреймворк «Bootstrap»
1.2 Spring Framework 
Spring Framework – универсальный фреймворк с открытым исходным кодом для Java-платформы. Spring Framework обеспечивает комплексную программную модель для современных Java приложений. Ключевой элемент Spring – это инфраструктурная поддержка приложений таким образом, чтобы команда разработчиков могла сфокусироваться на бизнес логике приложения которое они пишут, а не на технических деталях платформы, на которую они устанавливают приложение [1].
 Spring – это не один конкретный фреймворк. Это общее названия для целого ряда небольших фреймворков, каждый из которых выполняет свою работу. У Spring Framework модульная структура. Это позволяет подключать только те модули, что нам нужны для приложения.
MVC — это паттерн проектирования веб-приложений, который включает в себя несколько более мелких шаблонов. При использовании MVC на три отдельных компонента разделены модель данных приложения, пользовательский интерфейс и логика взаимодействия пользователя с системой, благодаря чему модификация одного из этих компонентов оказывает минимальное воздействие на остальные или не оказывает его вовсе [7].
	Модель – это данные и правила, которые используются для работы с данными и представляют концепцию управления приложением. В любом приложении вся структура моделируется как данные, которые обрабатываются определённым образом. 
	Вид обеспечивает различные способы представления данных, которые получены из модели. Он может быть шаблоном, который заполняется данными. Может быть несколько различных видов, и контроллер выбирает, какой подходит наилучшим образом для текущей ситуации. В основном вид генерирует HTML, который пользователь видит в своём браузере.
	Контроллер – управляет запросами пользователя. Его основная функция — вызывать и координировать действие необходимых ресурсов и объектов, нужных для выполнения действий, задаваемых пользователем. Обычно контроллер вызывает соответствующую модель для задачи и выбирает подходящий вид.
Spring Security - это фреймворк, который сфокусирован на обеспечение как аутентификации, так и авторизации в Java-приложениях. Как и все Spring проекты, настоящая сила Spring Security в том, что он может быть легко дополнен нужным функционалом [8].
1.3 IntelliJ IDEA  
Программное обеспечение JetBrains IntelliJ IDEA – это ведущая среда быстрой разработки на языке Java. IntelliJ IDEA представляет собой высокотехнологичный комплекс тесно интегрированных инструментов программирования, включающий интеллектуальный редактор исходных текстов с развитыми средствами автоматизации,  системами управления версиями, уникальный инструмент оптимизации и проверки кода Code Inspection, а также инновационный визуальный конструктор графических интерфейсов [2]. 
Хотя платформа ориентирована, в первую очередь, на Java-кодинг, ее универсальность позволяет работать с разными языками. У IntelliJ IDEA красивый и интуитивный интерфейс, который позволяет разобраться даже новичку.
Интерфейс IntelliJ IDEA представлен на рисунке 1.1.
Рисунок 1.1 – Интерфейс IntelliJ IDEA

	К преимуществам IntelliJ IDEA относится:
	IDEA является мощнейшим редактором исходного кода. Здесь есть не только классические подсветки синтаксиса, но и автоматическое добавление нужных импортов с удалением ненужных, встроенное отображение документации несколько буферов обмена. Все это действительно дает прирост к производительности. 
	Интеграция с Github.
	Инструменты для работы с базами данных и SQL файлами, включая удобный клиент и редактор для схемы базы данных.
	Инструменты для запуска тестов и анализа покрытия кода, включая поддержку всех популярных фреймворков для тестирования.
Главный недостаток программного обеспечения IntelliJ IDEA заключается в том, что оно не бесплатное и имеет пробный период 30 дней.
1.4 HTML, CSS, Bootstrap Framework  
HTML5 – стандартизированный язык разметки, позволяющий создавать разнообразные сайты и веб–приложения.
Одним из главнейших отличий HTML5 от предыдущих версий является семантичность. Данные, которые заключены между открывающим и закрывающим тегом должны соответствовать смыслу данного тега. HTML5 вводит несколько новых элементов и атрибутов, которые отражают типичное использование разметки на современных веб-сайтах.
Стилем или CSS называется набор параметров форматирования, который применяется к элементам документа, чтобы изменить их внешний вид. Возможность работы со стилями издавна включают в развитые издательские системы и текстовые редакторы, тем самым позволяя одним нажатием кнопки придать тексту заданный, заранее установленный вид. Теперь это доступно и создателям сайта, когда цвет, размеры текста и другие параметры хранятся в определенном месте и легко «прикручиваются» к любому тегу. Еще одним преимуществом стилей является то, что они предлагают намного больше возможностей для форматирования, чем обычный HTML [3].
Bootstrap – фреймворк, набор HTML и CSS инструментов и шаблонов для верстки и более эффективного и быстрого создания сайтов и веб-приложений более эффективно и быстро. Bootstrap – это файл или несколько файлов с готовым написанным кодом, которые подключаются к сайту в секции head, после чего становится возможным использование этого фреймворка.
Основное отличие верстки с помощью Bootstrap заключается в том, что Bootstrap включает в себя использование компонентов. Компоненты представляют из себя часто используемые готовые HTML блоки с предопределенными стилями. Иногда компоненты используют JavaScript. Верстальщик может использовать как готовый компонент, так и определить свой внешний вид для него. Для этого часто нужно лишь поменять значение переменных в Bootstrap. Если нужны более гибкие изменения, верстальщик всегда может изменить HTML и CSS по своему усмотрению.
Существует ряд инструментов Bootstrap для создания сайта:
	Шаблоны позволяют изменять оформление элементов. Бывают фиксированные и резиновые CSS шаблоны, которые подключаются сразу после установки Bootstrap. Можно использовать готовые или индивидуальные решения.
	Типографика позволяет форматировать шрифты и создавать заголовки, подзаголовки, абзацы, цитаты и другие структурные элементы.
	Сетка – инструмент для расположения блоков и функциональных элементов за счет заранее заданных размеров колонок. Отображение блоков зависит от устройства и указывается при помощи префиксов и классов. Родительский блок делится на двенадцать частей, с которыми и работает пользователь.
	Медиа позволяет управлять видео, изображениями и другими графическими файлами.
	Навигация является основным элементом любого сайта, позволяя пользоваться вкладками, страницами, меню и тулбаром. Фреймворк содержит дизайны для всех отдельных элементов, позволяя создавать макеты разной сложности.
	Формы используются для отдельных полей, блоков, кнопок, меток и других элементов. Можно выбирать расположение, использовать разделители, 10 подсветку и другие инструменты, управляя не только формами, но и событиями с ними.
	Алерты предполагают оформление всплывающих и диалоговых окон, подсказок, других оповещений. 
К недостаткам Bootstrap можно отнести следующее:
	Сайты, построенные на Bootstrap, походи между собой, так что невозможно достичь абсолютной уникальности. 
	Настройки стилей и структуры недостаточно гибкие.
	Избыточный код усложняет работу с ним.



















ГЛАВА 2. РЕАЛИЗАЦИЯ ПОЛЬЗОВАТЕЛЬСКОЙ ЧАСТИ
	2.1 Информационная структура сайта 
Информационная структура сайта – это методология организации контентного наполнения веб-сайта, включающая все материалы и связи, позволяющие наполнению, не перебивая взаимодействовать друг с другом. От продуманности и грамотности информационной структуры сайта зависит удобство использования интернет ресурса посетителем. Данная структура создается на этапе проектирования самого сайта и обосновывается в индивидуальном порядке, однако, всегда должна ясно отражать цель бизнеса и повышать сайт в органической выдаче. Контролем данного наполнения занимается контент-менеджер [4]. 
«Draw» – это сервис, предназначенный для формирования диаграмм и схем. Информационная структура сайта, созданная при помощи «Draw» представлена на рисунке 2.1.
Рисунок 2.1 – Информационная структура сайта 
Структура веб-сайта состоит из 6 основных страниц: «Главная», «Продукты», «О нас», «FAQ», «Продукт». А также страниц: «Админ-панель», «Авторизация». 
Хорошая структура сайта делает его удобным не только для посетителей. Поисковым роботам она тоже облегчит работу, в итоге не будет проблем с индексацией страниц. 

	2.2 	Графический дизайн сайта
Проектирование графического дизайна – это крайне важный этап проектирования сайта. Ведь в первую очередь пользователи обращают внимание на визуальный стиль. 
На сайте основными цветовым сочетанием является светло-серый и светло-голубой.  Для сайта используется шрифт Montserrat.
 Графический дизайн некоторых страниц сайта, использующий общую стилистику, предоставлен на рисунках 2.2-2.4. 
Рисунок 2.2 – Главная страница сайта

Рисунок 2.3 – Страница авторизации 

Данный графический дизайн хорошо подходит тематике сайта, имеет хорошее сочетание цветов и шрифта. 

Рисунок 2.4 – Страница Продукта

Административная панель управления содержит общие команды, которые могут понадобиться при управлении сайтом. Ключевое преимущество веб-ресурсов с панелью администратора – наличие интерактивного интерфейса, разрешающего взаимодействовать с материалами и уже добавленными графическими, текстовыми файлами в наглядном режиме. Без админки справляться с поставленными задачами предстоит вручную, заглядывая внутрь компонентов, расположившихся в базе данных выбранного хостинга. 
Панель администратора представляет собой таблицу, в которой расположены вся продукция. Для добавления нового товара на сайт администратор перейти на страницу «Добавить».
Админ панель сайта представлена на рисунке 2.5.
Рисунок 2.4 – Страница Продукта

Таким образом, залог успешного функционирования сайта заключается в его своевременном администрировании. Обусловлено это тем, что абсолютно любой сайт нуждается в систематическом обновлении информации, модернизации функционала и оперативном устранении неполадок. 
Мобильной версией называют отдельную версию сайта, в целом повторяющую главную, но существенно урезанную. Она выполняется в единую колонку, чтобы ей было удобно пользоваться на смартфонах и планшетных компьютерах. Как правило, в мобильной версии есть лишь основные пользовательские функции, и пользователь может с комфортом перемещаться по всему сайту, искать и находить там всю необходимую информацию. Все невероятно понятно, и мобильная версия сайта, по сути, служит лишь особой версткой, которую можно смотреть на разных мобильных устройствах [5]. 

Сегодня адаптивный дизайн является наиболее распространенным. отличительной характеристикой подобного дизайна можно считать отсутствие отдельной версии сайта, иными словами, дизайн подстраивается под пользователей с учетом разрешения экрана. Подобный дизайн выполняется для разного рода устройств. Для планшетов и телефонов делаются различные версии, которые сделали бы восприятие контента сайта более эффективным.
Адаптированная под мобильные разрешения версия сайта представлена на рисунке 2.6.

Рисунок 2.6 – Страница Продукта







ГЛАВА 3. РЕАЛИЗАЦИЯ СЕРВЕРНОЙ ЧАСТИ САЙТА
Большинство крупных веб-сайтов используют программирование серверной части чтобы динамично отображать различные данные при необходимости, в основном взятые из базы данных, располагающейся на сервере и отправляемые клиенту для отображения через некоторый код. Это также даёт возможность взаимодействовать с пользователем сайта, посылая уведомления и обновления по электронной почте или по другим каналам. Все эти возможности позволяют глубже взаимодействовать с пользователями [6].
Проект содержит набор файлов, представленных на рисунке 3.1.
Рисунок 3.1 – Структура проекта
База данных сайта содержит следующие поля: id, name, description, price и photo. Класс создания таблицы товаров представлен в листинге 3.1.
Листинг 3.1 – Класс создания таблицы
	public class WaterHeater {

    	@Id
    	@GeneratedValue(strategy = GenerationType.AUTO)
    	private Long id;
    	private String name, description, photo;
    	private int price;}

	Все страницы сайта содержат блоки «header» и «footer», поэтому для того, чтобы использовать один и тот же код, они подключаются через шаблонизатор Thymeleaf. Добавление хедера и футера представлены в листинге 3.2.
 Листинг 3.2 – Класс создания таблицы
	<header th:insert="blocks/header :: header"/>
	<div th:insert="blocks/footer1 :: footer"/>
Для добавления продукции на сайт контроллер  
Для вывода продукции используется шаблонизатор Thymeleaf. Для начала создается цикл, выводящий все объекты из базы данных. Все изображения хранятся в папке /static/assets/. в базе данных поля картинок имеют тип string, для вывода картинок указывается их путь и с помощью шаблонизатора добавляется имя файла. Данный процесс показан в листинге 3.3.
Листинг 3.3 – Вывод продуктов на экран
<div th:each="el : ${wh}" class="col-lg-3 col-md-4 col-sm-6">
    <!--  Single Grid product Start -->
    <div class="single-grid-product mb-40">
        <div class="product-image">
            <a th:href="'/product/'+ ${el.id}">
                <img th:src="'/assets/images/product/' +${el.photo}" class="img-fluid" alt="">
            </a>
        </div>
        <div class="product-content">
            <h3 th:text="${el.name}" class="title"> <a th:href="'/product/' + ${el.id}"></a></h3>
            <p  class="product-price"><span th:text="${el.price} + Byn" class="discounted-price"></span></p>
        </div>
    </div>
</div>

Контроллеры обрабатывают входящие запросы. При получении определенных URL в Контроллере определяется, какая html-страница будет выведена на экране пользователя. В случае, если необходимо обратиться к какому-то определенному объекту таблицы, можно использовать функцию findById(id). Пример Контроллеров показан в листинге 3.4.
Листинг 3.4 – Контроллеры
@GetMapping("/products")
public String products(Model model) {
    Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
    model.addAttribute("wh",waterHeaters);
    return "products";
}

@GetMapping("/product/{id}")
public String product(@PathVariable(value = "id") long id, Model model) {
    Optional<WaterHeater> waterHeater = waterHeaterRepository.findById(id);
    ArrayList<WaterHeater> res = new ArrayList<>();
    waterHeater.ifPresent(res::add);
    model.addAttribute("product",res);
    return "product";
}
Для реализации авторизации используется фреймворк Spring Security. В файле конфигурации находится список пользователей, их имена, пароли и роли. Также указываются адреса, ресурсы, доступные пользователям без авторизации  или, наоборот, указываются адреса, недоступные пользователям без определенных ролей. Конфигурация Spring Security представлена в листинге 3.5.
Листинг 3.5 – WebSecurityConfig
@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http
                .cors().and().csrf().disable()
                .authorizeRequests()
                .antMatchers(HttpMethod.GET, "/**/*.css", "/**/*.js", "/**/*.scss",
                        "/**/*.png", "/**/*.jpg","/**/*.svg", "/**/*.gif",
                        "/**/*.woff", "/**/*.woff2", "/**/*.ttf").permitAll()
                .antMatchers("/add/**","/adminpage/**").hasRole("ADMIN")
                .anyRequest().authenticated()
                .and()
                .formLogin()
                .loginPage("/login")
                .permitAll()
                .and()
                .logout()
                 .logoutSuccessUrl("/");


    }
    @Bean
    @Override
    public UserDetailsService userDetailsService() {
        UserDetails user =
                User.withDefaultPasswordEncoder()
                        .username("user")
                        .password("p")
                        .roles("USER")
                        .build();
        UserDetails admin =
                User.withDefaultPasswordEncoder()
                        .username("admin")
                        .password("p")
                        .roles("ADMIN")
                        .build();

        return new InMemoryUserDetailsManager(user,admin);
    }
}
Для обычного пользователя скрыты такие элементы управления, как добавить, редактировать и удалить продукт. Это достигнуто с помощью проверки на аутентификацию администратора. После авторизации администратора в шапке сайта появляется ссылка на админ-панель и открывается доступ к ее URL-адресам. Пункт «Админ» в меню шапки представлен на картинке 3.2.
 Рисунок 3.1 – Пункт «Админ»
Для добавления нового продукта или редактирования используется метод POST. Он предназначен для запроса, при котором сервер принимает данные, заключённые в тело сообщения, для хранения. Контроллеры удаления, редактирования и добавления продукта представлены на листинге 3.6.
Листинг 3.6 – Контроллеры редактирования и добавления продукта
@PostMapping("/addpage/add")
public String addproduct( @RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
    WaterHeater post = new WaterHeater(name,  description, price, photo);
    waterHeaterRepository.save(post);
    return "redirect:/addpage";
}

@PostMapping("/product/{id}/edit")
public String productedit( @PathVariable(value="id") long id,@RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
    WaterHeater post = waterHeaterRepository.findById(id).orElseThrow();
    post.setName(name);
    post.setDescription(description);
    post.setPrice(price);
    post.setPhoto(photo);
    waterHeaterRepository.save(post);
    return "redirect:/adminpage";
}



ЗАКЛЮЧЕНИЕ 
 
В ходе выполнения курсовой работы были рассмотрены основные принципы создания веб-приложения и клиент-серверной архитектуры, такие как Spring Framework, Framework Bootstrap, Spring MVC, а также язык разметки HTML. 
Сайт включает в себя следующие страницы: 
	«Главная страница»
	 «Продукция»
	 «Продукт»
	 «FAQ»
	 «О нас»
	 «Админ»
	 «Авторизация»
Была разработана интернет-витрина водонагревателей «HeateR», в котором пользователи могут подобрать водонагреватели основываясь на их цене и описании.  Была создана административная панель, в которой можно удалять, добавлять и изменять водонагреватели.
               


















СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ 
 
1.	Spring Core - JavaStudy tutorial [Электронный ресурс] – Режим доступа: https://javastudy.ru/frameworks/spring/spring-core/ – Дата доступа: 17.12.2020. 
2.	Описание продукта JetBrains IntelliJ IDEA - ITPRO.UA [Электронный ресурс] – Режим доступа: https://itpro.ua/product/jetbrains-intellij-idea/?tab=description  – Дата доступа: 18.12.2020. 
3.	Самоучитель CSS [Электронный ресурс] – Режим доступа: http://htmlbook.ru/samcss  – Дата доступа: 19.12.2020. 
4.	Что такое информационная структура сайта? [Электронный ресурс] – Режим доступа: https://gusarov-group.by/wiki-internet-marketologa/struktura-sajta/ – Дата доступа: 19.12.2020. 
5.	Мобильная версия сайта: зачем нужна и как выбрать тип верстки [Электронный ресурс] – Режим доступа: https://moyizametki.ru/sajtostroenie/mobilnaya-versiya-sajta-zachem-nuzhna-i-kak-vybrat-tip-verstki/ – Дата доступа: 19.12.2020. 
6.	Введение в серверную часть - Изучение веб-разработки. [Электронный ресурс] – Режим доступа: https://developer.mozilla.org/ru/docs/Learn/Server-side/First_steps/Introduction – Дата доступа: 19.12.2020. 
7.	MVC — модель-представление-контроллер [Электронный ресурс] – Режим доступа: https://web-creator.ru/articles/mvc – Дата доступа: 19.12.2020. 
8.	Spring Security | Spring по-русски! [Электронный ресурс] – Режим доступа: https://spring-projects.ru/projects/spring-security/ – Дата доступа: 19.12.2020. 













ПРИЛОЖЕНИЯ 
ПРИЛОЖЕНИЕ А  
Рисунок A1 – Страница авторизации











ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ А  

Рисунок A2 – Главная страница  













ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ А  


Рисунок A3 – Страница товара  

Рисунок A4 – Страница «О нас» 




ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ А  
Рисунок A5 – Страница «FAQ» 


Рисунок A6 – Страница «Админ» 








ПРИЛОЖЕНИЕ Б

Код файла «MainController.java»

package com.heater.Heater.controllers;

import com.heater.Heater.models.WaterHeater;
import com.heater.Heater.rep.WaterHeaterRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.Optional;


@Controller
public class MainController {

    @Autowired
    private WaterHeaterRepository waterHeaterRepository;


    @GetMapping("/")
    public String home(Model model) {
        Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "home";
    }

    @GetMapping("/products")
    public String products(Model model) {
        Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "products";
    }

    @GetMapping("/product/{id}")
    public String product(@PathVariable(value = "id") long id, Model model) {
        Optional<WaterHeater> waterHeater = waterHeaterRepository.findById(id);
        ArrayList<WaterHeater> res = new ArrayList<>();
        waterHeater.ifPresent(res::add);
        model.addAttribute("product",res);
        return "product";
    }


    

ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б

@GetMapping("/admin")
 public String admin() {
        return "home";
    }

    @GetMapping("/user")
    public String user() {
        return "home";
    }

    @GetMapping("/adminpage")
    public String admin(Model model) {
        Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "tables";
    }

    @GetMapping("/addpage")
    public String addpage(Model model) {
        return "forms";
    }

    @PostMapping("/addpage/add")
    public String addproduct( @RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
        WaterHeater post = new WaterHeater(name,  description, price, photo);
        waterHeaterRepository.save(post);
        return "redirect:/addpage";
    }

    @GetMapping("/product/{id}/edit")
    public String edit(@PathVariable(value = "id") long id, Model model) {
        Optional<WaterHeater> waterHeater = waterHeaterRepository.findById(id);
        ArrayList<WaterHeater> res = new ArrayList<>();
        waterHeater.ifPresent(res::add);
        model.addAttribute("product",res);
        return "edit";
    }

    @PostMapping("/product/{id}/edit")
    public String productedit( @PathVariable(value="id") long id,@RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
        WaterHeater post = waterHeaterRepository.findById(id).orElseThrow();
        post.setName(name);
        post.setDescription(description);
        post.setPrice(price);

ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б

        post.setPhoto(photo);      
 waterHeaterRepository.save(post);
        return "redirect:/adminpage";
    }

    @PostMapping("/product/{id}/remove")
    public String productremove( @PathVariable(value="id") long id,  Model model) {
        WaterHeater post = waterHeaterRepository.findById(id).orElseThrow();
        waterHeaterRepository.delete(post);
        return "redirect:/adminpage";
    }


}


Код файла «WaterHeater.java»

package com.heater.Heater.controllers;

import com.heater.Heater.models.WaterHeater;
import com.heater.Heater.rep.WaterHeaterRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.Optional;


@Controller
public class MainController {

    @Autowired
    private WaterHeaterRepository waterHeaterRepository;


    @GetMapping("/")
    public String home(Model model) {
        Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "home";
    }

    @GetMapping("/products")
    public String products(Model model) {
        Iterable<WaterHeater> waterHeaters = 
ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б

waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "products";
    }

    @GetMapping("/product/{id}")
    public String product(@PathVariable(value = "id") long id, Model model) {
        Optional<WaterHeater> waterHeater = waterHeaterRepository.findById(id);
        ArrayList<WaterHeater> res = new ArrayList<>();
        waterHeater.ifPresent(res::add);
        model.addAttribute("product",res);
        return "product";
    }


    @GetMapping("/admin")
    public String admin() {
        return "home";
    }

    @GetMapping("/user")
    public String user() {
        return "home";
    }

    @GetMapping("/adminpage")
    public String admin(Model model) {
        Iterable<WaterHeater> waterHeaters = waterHeaterRepository.findAll();
        model.addAttribute("wh",waterHeaters);
        return "tables";
    }

    @GetMapping("/addpage")
    public String addpage(Model model) {
        return "forms";
    }

    @PostMapping("/addpage/add")
    public String addproduct( @RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
        WaterHeater post = new WaterHeater(name,  description, price, photo);
        waterHeaterRepository.save(post);
        return "redirect:/addpage";
    }

    @GetMapping("/product/{id}/edit")
    public String edit(@PathVariable(value = "id") long id, Model model) {
        Optional<WaterHeater> waterHeater = 

ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б

waterHeaterRepository.findById(id);
       
 ArrayList<WaterHeater> res = new ArrayList<>();
        waterHeater.ifPresent(res::add);
        model.addAttribute("product",res);
        return "edit";
    }

    @PostMapping("/product/{id}/edit")
    public String productedit( @PathVariable(value="id") long id,@RequestParam String name, @RequestParam String description, @RequestParam int price, @RequestParam String photo,  Model model) {
        WaterHeater post = waterHeaterRepository.findById(id).orElseThrow();
        post.setName(name);
        post.setDescription(description);
        post.setPrice(price);
        post.setPhoto(photo);
        waterHeaterRepository.save(post);
        return "redirect:/adminpage";
    }

    @PostMapping("/product/{id}/remove")
    public String productremove( @PathVariable(value="id") long id,  Model model) {
        WaterHeater post = waterHeaterRepository.findById(id).orElseThrow();
        waterHeaterRepository.delete(post);
        return "redirect:/adminpage";
    }


}


Код файла «pom.xml»
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>2.4.0</version>
      <relativePath/> <!-- lookup parent from repository -->
   </parent>
   <groupId>com.heater</groupId>
   <artifactId>Heater</artifactId>
   <version>0.0.1-SNAPSHOT</version>
   <name>Heater</name>
   <description>Demo project for Spring Boot</description>

  ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б
 <properties>
      <java.version>15</java.version>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-thymeleaf</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-web</artifactId>
      </dependency>

      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-devtools</artifactId>
         <scope>runtime</scope>
         <optional>true</optional>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-test</artifactId>
         <scope>test</scope>
         <exclusions>
            <exclusion>
               <groupId>org.junit.vintage</groupId>
               <artifactId>junit-vintage-engine</artifactId>
            </exclusion>
         </exclusions>
      </dependency>

      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
      <dependency>
         <groupId>mysql</groupId>
         <artifactId>mysql-connector-java</artifactId>
         <scope>runtime</scope>
      </dependency>



      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-security</artifactId>
      </dependency>
      <!-- наш старый добрый thymeleaf шаблонизатор -->

      <!-- опционально, библиотека добавит полезные теги для SPRING SECURITY в Thymeleaf шаблонах -->
      <dependency>
         <groupId>org.thymeleaf.extras</groupId>
         <artifactId>thymeleaf-extras-springsecurity4</artifactId>

ПРОДОЛЖЕНИЕ ПРИЛОЖЕНИЯ Б
         <version>2.1.2.RELEASE</version>
      
</dependency>
      <!-- содержит в себе необходимые библиотеки для создания ВЕБ приложения -->



   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
               <source>14</source>
               <target>14</target>
            </configuration>
         </plugin>
      </plugins>
   </build>

</project>

